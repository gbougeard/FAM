[main]
# Notice how we didn't define the class for the FormAuthenticationFilter ('authc') -
#it is instantiated and available already:
authc.loginUrl = /login/
#authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
#authc = org.fam.common.exception.VerboseFormAuthenticationFilter

# specify login page
#mmer = org.fam.jsf.bean.Credentials
# name of request parameter with username; if not present filter assumes 'username'
authc.usernameParam = username
# name of request parameter with password; if not present filter assumes 'password'
authc.passwordParam = password
# does the user wish to be remembered?; if not present filter assumes 'rememberMe'
#authc.rememberMeParam = remember

# redirect after successful login
authc.successUrl  = /auth/myAccount/

securityManager.sessionManager.globalSessionTimeout = 1800000

# name of request parameter with username; if not present filter assumes 'username'
#authc.usernameParam = j_username
# name of request parameter with password; if not present filter assumes 'password'
#authc.passwordParam = j_password
authc.failureKeyAttribute = shiroLoginFailure

jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
#jdbcRealm.permissionsLookupEnabled=false
# If not filled, subclasses of JdbcRealm assume "select password from users where username = ?"
jdbcRealm.authenticationQuery = select password from fam_user where email = ?
# If not filled, subclasses of JdbcRealm assume "select role_name from user_roles where username = ?"
#jdbcRealm.userRolesQuery = select role_name from fam_users_roles where email = ?

ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName = localhost
ds.user = fam
ds.databaseName = fam
jdbcRealm.dataSource = $ds

#For pwd encryption
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
jdbcRealm.credentialsMatcher = $sha256Matcher



[users]
#admin = admin, ROLE_ADMIN
# user 'root' with password 'secret' and the 'admin' role
root = secret, admin
admin = secret
lonestarr = vespa, goodguy, schwartz
darkhelmet = ludicrousspeed, badguy, schwartz

[roles]
# 'admin' role has all permissions, indicated by the wildcard '*'
admin = *
guest = view:*
#user = view:*, edit:*
#ROLE_ADMIN = *

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
# your login form page here:
#/login/ = authc
# make sure the end-user is authenticated.  If not, redirect to the 'authc.loginUrl' above,
# and after successful authentication, redirect them back to the original account page they
# were trying to view:

/login/ = authc
/auth = authc